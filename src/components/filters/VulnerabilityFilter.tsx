import React from 'react';
import { VulnerabilityFilter as VulnerabilityFilterType } from '../../types/filters';

export enum VulnerabilitySeverity {
  Critical = 'CRITICAL',
  High = 'HIGH',
  Medium = 'MEDIUM',
  Low = 'LOW',
}

export const VULNERABILITY_SEVERITY_LABELS: Record<VulnerabilitySeverity, string> = {
  [VulnerabilitySeverity.Critical]: 'Critical',
  [VulnerabilitySeverity.High]: 'High',
  [VulnerabilitySeverity.Medium]: 'Medium',
  [VulnerabilitySeverity.Low]: 'Low',
};

interface VulnerabilityFilterProps {
  filter: VulnerabilityFilterType;
  onUpdate: (updatedFilter: VulnerabilityFilterType) => void;
}

export const VulnerabilityFilter: React.FC<VulnerabilityFilterProps> = ({
  filter,
  onUpdate,
}) => {
  const handleSeverityChange = (severity: VulnerabilitySeverity) => {
    const currentSeverities = filter.options.severity;
    const newSeverities = currentSeverities.includes(severity)
      ? currentSeverities.filter(s => s !== severity)
      : [...currentSeverities, severity];
    
    onUpdate({
      ...filter,
      options: {
        severity: newSeverities,
      },
      value: generateFilterValue(newSeverities),
    });
  };

  const generateFilterValue = (severities: VulnerabilitySeverity[]) => {
    if (severities.length === 0) return '';
    
    // Check if all severity levels are selected
    const allSeverities = Object.values(VulnerabilitySeverity);
    const hasAllSeverities = allSeverities.every(severity => 
      severities.includes(severity)
    );

    // If all severities are selected, use the simplified rule
    if (hasAllSeverities) {
      return '      vulns.all.exists(x, true)';
    }
    
    // Otherwise, use the individual severity rules
    const conditions = severities.map(severity => {
      const severityLower = severity.toLowerCase();
      return `      vulns.${severityLower}.exists(p, true)`;
    });
    
    return conditions.join(' ||\n') + (conditions.length > 1 ? '\n' : '');
  };

  const selectedSeverities = filter.options.severity;
    
  return (
    <div className="space-y-2">
      <label className="block text-sm font-medium text-slate-300">Severity Levels</label>
      <div className="grid grid-cols-2 gap-2">
        {Object.entries(VULNERABILITY_SEVERITY_LABELS).map(([severity, label]) => (
          <button
            key={severity}
            onClick={() => handleSeverityChange(severity as VulnerabilitySeverity)}
            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors flex items-center justify-center gap-2 ${
              selectedSeverities.includes(severity as VulnerabilitySeverity)
                ? 'bg-blue-500/20 text-blue-400 border border-blue-500/30'
                : 'bg-white/5 text-slate-300 border border-slate-700/50 hover:bg-white/10'
            }`}
          >
            <span className={`w-2 h-2 rounded-full ${
              severity === VulnerabilitySeverity.Critical ? 'bg-red-500' :
              severity === VulnerabilitySeverity.High ? 'bg-orange-500' :
              severity === VulnerabilitySeverity.Medium ? 'bg-yellow-500' :
              'bg-blue-500'
            }`} />
            {label}
          </button>
        ))}
      </div>
    </div>
  );
}; 